[[workingwithodenadmin]]

== Working with ODEN Admin
---
::

본 장에서는 ODEN의 Web 기반 GUI 환경에 대한 보다 상세한 이해를 위한 설명을 제공한다.

[[workingwithodenadmin_introductionodenadmin]]


=== Introduction to ODEN Admin

:: ODEN Admin은 ODEN Server와 연계하여 배포관리를 지원하는 UI이며, 다음과 같은 주요 특장점을 가진다.

* Job 추가, 삭제 및 관리 기능 제공.

* Job Grouping 기능 제공.

* 배포할 파일 미리보기 기능 제공.

* 특정 서버에 대해 스크립트 실행 기능 제공.

* 서버간 배포 결과 비교 기능 제공.

* 배포 진행 상황 확인 기능 제공.

* 배포 결과 확인 기능 제공.

* 시스템 에러로그 확인 기능 제공.

* 사용자 권한 관리

* Jenkins 연동을 통한 빌드수행 기능 제공.

[[workingwithodenadmin_job]]


=== Job

:: Job은 어디에서 어디로 배포될 것인지에 대한 내용이 기술된 ODEN의 배포 설정 단위이다. Job은 하나의 SOURCE와 여러개의 Target으로 이루어져 있다. SOURCE는 배포할 파일이 위치한 경로(빌드서버)를 지칭하며, Target은 파일이 배포될 경로(개발 혹은 운영서버)를 말한다.

[[workingwithodenadmin_job_list]]


==== Job List

:: Job 목록 화면은 현재 등록된 Job들의 목록을 보여준다. Job Name 항목은 저장된 Job의 이름을 보여주며, 다른 Job 이름과 중복되어서는 안된다. 해당 이름을 클릭하면 Job 수정화면으로 전환된다. Job의 Status 항목은 해당 Job의 배포가 최근에 성공했는지 여부를 보여준다. 녹색이면 성공, 레드이면 실패다. Job의 Action 항목은 Job과 관련된 동작들을 수행할 수 있는 아이콘들을 보여준다. Action항목의 각 아이콘별 동작은 아래 표와 같다.

[cols='1, 2a, 3a', options="header"]
|===============
^|Icon ^|Name ^|Description

^| image:../image/WorkingWithOdenAdmin/job_build.png[]
^| <<workingwithodenadmin_job_deploy,Job Build>>
| 연동되어있는 Jenkins의 job 빌드시 일반적으로 사용하게될 버튼이다. 수행 후 나타나는 모니터버튼을 누르면 jenkins화면의 실행로그를 확인할 수 있다. 
							
^| image:../image/WorkingWithOdenAdmin/job_deploy.png[] 
^| <<workingwithodenadmin_job_deploy,Job Deploy>>
| 배포 시 일반적으로 사용하게될 버튼이다. 배포 대상이 되는 파일들을 미리 확인할 수 있다. 배포 대상은 지난 배포 시점이후 변경된 파일들이 될 수도 있고, 이미 배포된 파일중 삭제하여야 하는 파일이 될 수도 있다. 
							
^| image:../image/WorkingWithOdenAdmin/job_cleandeploy.png[]
^| <<workingwithodenadmin_job_cleandeploy,Job Clean Deploy>>
| 대부분의 경우 위의 Deploy를 사용하겠지만, 그것만으로 부족한 경우, 이 기능을 사용하면 배포되었던 모든 파일들을 삭제하고 전부 다시 배포하게 된다.
							
^| image:../image/WorkingWithOdenAdmin/job_compare.png[]
^| <<workingwithodenadmin_job_compare,Compare Targets>>
| Target Server가 여러대 인 경우 해당 서버들에 배포된 파일들이 정말 동일한 파일들인지 알기를 원할 때가 있다. 
	이 기능은 Target Server에 있는 파일들을 비교하여 정말 동일한 파일인지 알려주는 기능이다. Target Server가
	두 대 이상일 경우에만 사용할 수 있다.  
							
^| image:../image/WorkingWithOdenAdmin/job_runscript.png[] 
^| <<workingwithodenadmin_job_script,Run Script>>
| Target Server에서 특정 명령어나 스크립트를 구동하고 싶은 경우 이 명령을 사용할 수 있다. 일반적으로 배포 전 서버 중지, 배포 후 서버 시작 등에 사용되며 이 기능을 사용하기 위해서는 수행할 명령어를 미리 Job의 Command 항목에 등록해 놓아야 한다. 
							
^| image:../image/WorkingWithOdenAdmin/job_del.png[]
^| <<workingwithodenadmin_job_addremove_remove,Delete Job>>
| 해당 Job을 삭제한다.
							
^| image:../image/WorkingWithOdenAdmin/job_rollback.png[]
^| <<workingwithodenadmin_job_rollback,Job Rollback>>
|	해당 Job의 최근 배포작업을 원복한다.
|===============




[[workingwithodenadmin_job_addremove]]


==== Add and Remove Job

:: Job 목록화면에서 우측 상단의 Add 버튼을 통해 새로운 Job을 등록할 수 있으며, 목록에서 기존에 있는 Job 이름을 선택하여 기존에 등록된 Job을 조회, 수정할 수도 있다. Action의 휴지통 아이콘을 클릭하면 해당 Job을 삭제할 수 있다.

[[workingwithodenadmin_job_addremove_add]]


===== Add Job

:: Job 목록화면에서 우측 상단의 Job 추가 버튼이나 기존 Job 이름을 클릭하면 Job 상세 화면으로 전환된다.

* **Job Name**
::
Job의 이름을 입력한다. Job을 구별할수 있는 유일한 키 이므로 기존의 Job 이름과 중복되지 않도록 한다.

[[workingwithodenadmin_job_addremove_add_source]]


====== SOURCE

:: 배포할 파일(빌드서버)의 경로를 입력하는 란이다. ODEN Server가 빌드서버에 설치되므로 배포 파일이 존재하는 path만 절대 경로로 적어주면 된다. SOURCE의 항목 중 Directory 항목은 반드시 입력하여야 한다.

* **Directory**
::
배포할 파일들이 존재하는 경로중 가장 상위의 경로를 절대경로로 입력한다. 이 경로 이하의 폴더와 파일들이 그 구조 그대로 Target으로 전송되므로 이 디렉토리의 폴더 및 파일들을 미리 배포될 형태로 구성해 놓아야 한다.

+
----
ex> c:/anyframe/target(Windows)
    /anyframe/target(Unix)
----
::
Windows의 경우 폴더 구분시 역슬래쉬 사용이 가능하다.

* **Excludes(optional)**
::
배포 대상에서 제외할 파일에 대한 조건을 입력한다. 조건이 둘 이상일 경우 띄어쓰기를 통해 구분한다.

+
----
ex> **/*.jar **/.svn/**
    (모든 jar 파일과, .svn 폴더 하위의 모든 파일들 제외)
----
::
**는 모든 하위폴더를 지칭한다. *는 현재 폴더만을 지칭한다. 예를들어, **/*.jar는 하위폴더의 모든 jar를 파일들을 제외하고 배포하겠음을 의미한다. **/.svn/**는 .svn이 들어가는 모든 폴더를 제외함을 의미한다.

* **Mappings(optional)**
::
Mapping은 변경된 파일만 배포하기 위해 설정해주어야 하는 부분이다. 예를들어 *.class 파일 배포 시, 빌드 전의 *.java 파일의 정보를 이용하여 변경 여부를 확인한다.
::
Anyframe프로젝트의 경우 Auto Mapping버튼을 이용하면 폴더구조를 분석하여 자동으로 mapping정보를 찾아준다. 단 기존의 mapping 정보가 모두 삭제되므로 주의한다. Auto Mapping을 이용하기 위해서는 Job이 서버에 등록되어 있어야 한다. 그러므로 Job에 대한 전체 설정을 마치고 Save를 한뒤 다시 Job으로 돌아와 Auto Mapping 버튼을 눌러주어야 한다.

[NOTE]
====
일반적으로 빌드시 기존에 빌드되었던 리소스 및 class파일을 모두 삭제하고 전체를 새로 빌드하거나 복사를 하게 된다. 결국 변경된 파일뿐만이 아니라 모든 파일들이 새로 생성되게 되므로 모든 파일들의 날짜가 지금 시점으로 변경이 되어 버린다. ODEN에서는 파일의 timestamp를 이용하여 변경된 파일을 감지하게 되는데, 위와 같은 경우 모든 파일들의 날짜가 변경되었으므로 모든 파일이 변경되었다고 생각하게 된다. 하지만 빌드전 원본파일(class 파일의 원본파일은 java 파일임)의 경우 변경된 것만 날짜가 갱신되었기 때문에 이 정보를 알 수 있다면, ODEN에서는 어느 파일이 새로 변경된 것인지 판단할 수가 있다. 그래서 배포할 파일말고 그것의 원본파일의 경로를 적어주는 곳이 Mappings란 곳이다.(형상관리를 이용하여 java파일들 내려받을 경우에도 대부분의 경우 변경된 파일만 내려받기 때문에 변경되지 않은 파일들의 날짜는 예전 그대로 있게된다.)

이런 내용을 이해하기 힘들다면 단순히 Auto Mapping 버튼만 클릭해도 왠만한 mapping정보는 찾을 수 있다. Auto Mapping 은 WEB-INF폴더를 기준으로 mapping 정보들을 얻어내므로 배포 대상 폴더에 WEB-INF폴더가 없을 경우 아무 결과도 나타나지 않을 것이다.

.class파일이 아닌 일반 리소스 파일의 경우, 원본디렉토리에서 빌드디렉토리로 복사시 ant의 copy태그에서 preservelastmodified="true" 로 하는 것도 mapping없이 변경파일만 감지할 수 있게 하는 방법 중 하나이다.


====


::
일반적인 웹 어플리케이션의 형태를 보면 WEB-INF/classes 폴더에는 빌드된 class파일들이 있고, 우리는 그 파일을 Target Server로 배포하게 된다. WEB-INF/classes 폴더는 어딘간의 src파일이 빌드된 결과물이다. Mappings에는 WEB-INF/classes, src경로.. 이 두가지를 적어 주어야 한다.
** **SUB DIRECTORY**
::
SOURCE란의 Directory에 적었던 경로 이하의 상대 경로를 적어준다. WEB-INF/classes라고 적었다면 실제경로는 SOURCE Directory경로 + WEB-INF/classes가 될 것이다.

+
----
ex> WEB-INF/classes
----
** **SCM MAPPING DIRECTORY**
::
SUB DIRECTORY에는 배포될 파일이 있고 그것이 빌드나 복사가 되기전 실제 원본 파일이 있는 경로를 이곳에 적어준다. class 파일이 아닌 경우에도 새로이 복사가 일어난 파일이라면 복사전 원본파일의 경로를 이곳에 적어주어야 한다.

+
----
ex> c:/anyframe/src/main/java(Windows)
    /anyframe/src/main/java(Unix)
----

[NOTE]
====
src폴더가 src/main/java와 src/main/resource 이렇게 두개가 있다면 이 두개의 빌드 결과 모두 WEB-INF/classes폴더로 가게 된다. 결국 mapping정보도 WEB-INF/classes - src/main/java, WEB-INF/classes - src/main/resource 이렇게 두개를 적어줘야 한다.


====


[[workingwithodenadmin_job_addremove_add_targets]]


====== Targets

:: 파일이 배포될 Target Server(개발 혹은 운영서버)를 입력하는 란이다. Target Server에는 ODEN이 Agent모드로 동작하고 있어야 한다. 하나 이상 필수로 입력해야만 한다.

* **STATUS**
::
Target Server를 모두 입력하고 저장한 뒤, Job을 다시 조회하면 STATUS 항목에 불이 들어온다. 녹색이면 Target Server의 ODEN Agent와 정상적으로 통신했다는 의미이고, 회색이면 대상서버의 ODEN Agent와 통신할 수 없음을 의미한다.

* **NAME**
::
Target Server를 지칭하는 이름을 지정한다. Job내의 다른 Target과 이름이 중복되어서는 안된다. 다른 Job의 Target과는 이름이 중복되어도 된다.

* **URL**
::
Target Server의 URL을 입력하는 란이다. ip:port 혹은 domain:port 형태로 입력하여야 한다. port는 ODEN Agent가 떠있는 포트로 기본 값은 9872이다.

+
----
ex> 127.0.0.1:9872
----
* **PATH**
::
Target Server의 어느 위치에 파일이 배포될 것인지 그 경로를 입력하는 란이다. 배포를 하게되면 SOURCE의 Directory이하의 파일 및 폴더들이 이 PATH이하로 그대로 전송이 된다.

+
----
ex> d:/anyframe/oden/server/webapp(Windows)
    /anyframe/oden/server/webapp(Unix)
----

[NOTE]
====
Target이 ODEN Agent와 1:1로 맵핑 되는 것은 아니다. Target이 지칭하는 시스템에 ODEN Agent만 동작하고 있으면 되므로, 한대의 ODEN Agent와 여러개의 Target이 맵핑 될 수도 있다. 예를 들어 배포할 파일이 특정 시스템의 여러 경로에 배포되어야 할 경우, Target을 PATH만 다르게하여 여러개 등록할 수 있다.


====


[[workingwithodenadmin_job_addremove_add_commands]]


====== Commands(optional)

:: Target에 지정한 시스템에 특정 명령이나 스크립트를 구동시킬 수 있다. 실행하고 싶은 명령어는 Commands항목에 미리 등록되어 있어야 한다. 등록된 명령어는 Job목록 화면에서 Run Script 아이콘을 클릭하여 실행시킬 수 있다.

* **NAME**
::
명령어를 지칭하는 이름이며, Job내의 다른 Commands 명과 중복되어서는 안된다.

* **PATH**
::
명령어가 수행될 위치를 입력한다. dir명령어를 수행할 경우 어느 위치에서 수행할 것인지 이곳에 입력해야 한다. Tomcat의 catalina.bat을 수행하고 싶다면 catalina.bat이 존재하는 경로를 입력하여야 한다.

+
----
ex> c:/anyframe/util/tomcat/bin(Windows)
    /anyframe/util/tomcat/bin(Unix)
----
* **SCRIPT**
::
실제 수행할 명령어나 스크립트를 입력한다. 명령어 뒤에 인자도 입력 가능하다. 명령어나 스크립트 입력시 ./startup.sh와 같이 앞에 ./같은 걸 붙여서는 안된다.

+
----
ex> startup.bat(Windows) startup.sh(Unix)
----

[WARNING]
.Warning
====
Job 등록시, Job Name과 Directory, Targets 1개이상 입력하여야 Job이 정상적으로 등록된다.


====


[[workingwithodenadmin_job_addremove_add_buildjob]]


===== Build Job(optional)

:: 연동되어 있는 Jenkins의 특정 job을 매핑시켜 빌드를 수행할 수 있다. Jenkins의 특정 job이 매핑되어 있어야 Job list화면의 빌드버튼이 활성화 된다.

* **Job Name**
::
매핑시키고자 하는 Jenkins의 job을 선택한다.


[WARNING]
.Warning
====
oden.ini의 build.url=""에 Jenkins url이 등록되어야 job list가 나타난다.


====


[[workingwithodenadmin_job_addremove_remove]]


===== Delete Job

:: Job목록화면에서 삭제하고 싶은 Job의 휴지통 아이콘을 클릭하여 해당 Job을 삭제할 수 있다.


[NOTE]
====
임의로 Job을 삭제하지 않기 위해, Admin role의 계정만 본 기능을 사용할 수 있다.


====


[[workingwithodenadmin_job_deploy]]


==== Job Deploy

:: 배포 대상이 될 파일의 목록을 확인하고 그 리스트 중에서 특정파일만 배포 or 삭제할 수 있다. 배포 대상 파일 모두를 보려면 Deploy Scope의 All옵션을, 이전 배포 시점이후 변경된 파일만 보려면 Modified only를 선택한다. 배포된 파일중 Target에는 존재하나, SOURCE에 존재하지 않는 파일들을 보려면 Delete를 추가 체크한다.

* **Modified Only**
::
배포 대상 파일중 변경된 파일만 배포하고 싶은 경우 선택한다. Job설정시 Mapping정보가 정확히 설정되어 있지 않으면, 변경된 파일뿐만 아니라 변경되지 않은 파일까지 보이게 된다.

* **All**
::
배포 Directory 하위에 있는 파일 모두를 변경 여부에 상관없이 배포하는 대상으로 인식한다.

* **Delete**
::
Target과 SOURCE를 비교하여, Target에 불필요한 파일이 포함되어 있을 경우, 삭제를 할 것인지 무시할 것인지를 결정하는 옵션이다.

* **Compress**
::
배포 대상 파일을 압축하여 배포하고 싶은 경우 선택한다. 이는 네트워크 구간에서 속도 저하가 우려될 경우 사용한다.

배포 옵션을 선택한 후에는 Preview 버튼을 통해 배포 대상 리스트를 미리 확인할 수 있다. 배포 대상중 제외하고 싶은 항목이 있다면 해당 항목 우측의 X를 클릭하면 해당 항목은 배포 or 삭제가 되지 않을 것이다.

Deploy버튼은 현재 보여지는 페이지의 파일들만 배포하는 버튼이며, Deploy All은 모든 페이지의 파일들을 배포하는 버튼이다. 하지만 Deploy All버튼으로 배포 시 X표시를 눌러 특정 파일만 제외하고 배포하는 것이 불가능하다. 실제로 눌러졌더라도 배포는 전부 될 것이다. 특정 파일만 제외하고 배포 or 삭제하고 싶다면, Deploy버튼을 눌러 배포 or 삭제를 수행해야 한다. Deploy버튼을 눌러 수행하면, 화면 전환이 일어나지 않고 현재 화면에 머물러 있다가, 배포가 끝나는 시점에 화면에는 배포가 완료된 항목을 제외한 리스트를 다시 보여준다.

Deploy All 기능을 통해 배포를 진행하다보면 pop-up이 나타나는데, 이를 통해 배포 후에 해당 Job에 등록된 스크립트 명령어 중 어떠한 명령어를 실행시킬 것인가에 대해 설정할 수 있다. 전체적으로 배포를 진행한 후 스크립트를 동작시키기를 원하면, 해당 스크립트를 선택한 후 배포를 진행하면 된다. 만약 배포만 진행하길 원할 경우에는 None을 선택한 후 배포를 진행하면 배포 완료 후 어떠한 스크립트도 수행하지 않는다.

[[workingwithodenadmin_job_cleandeploy]]


==== Job Clean Deploy

:: Target Server 디렉토리를 초기화하고, 현재 ODEN Server의 상태로 동기화 시키기 위한 명령이다. 다시 말하면, Target Server의 모든 파일이 삭제되고 SOURCE의 모든 파일이 다시 해당 서버로 배포가 되는 명령이다. 단, Deploy와는 다르게 미리보기를 지원하지 않으며 옵션을 선택할 수도 없다. 아이콘을 클릭하는 순간 바로 배포가 되므로 주의해야 한다.

[[workingwithodenadmin_job_compare]]


==== Compare Targets

:: Target Server간의 정합성 확인을 위한 화면이다. Target들에 배포된 파일들이 서로 동일한 파일인지 아닌지를 검사하여 결과를 보여준다. 기본적으로 동일하지 않은 목록만 보여주며, 우측상단의 Failed Only버튼의 체크를 해제하면, 동일한 파일까지 포함된 Target들에 배포된 모든 파일들을 보여준다. 다음의 경우 동일하지 않은 파일로 나올 수 있다.

* 파일이 검사대상 Target중 일부 Target에 존재하지 않을 경우.

* 파일이 존재하나 파일의 사이즈가 틀린경우.

* 파일이 존재하나 파일의 Timestamp가 틀린 경우.

[[workingwithodenadmin_job_script]]


==== Run Script

:: Job설정시 등록한 Command를 수행할 수 있는 화면이다. 일반적으로 배포 전 서버 정지, 배포 후 서버 시작등의 명령을 수행하는 용도로 쓰인다. Job설정시 최소 하나 이상의 Command를 등록하였어야 이 화면에 접근할 수 있다. 스크립트 실행화면에서는 먼저 명령어를 수행할 Target들을 선택한 후, 우측의 Command 목록에서 수행할 명령어의 화살표 아이콘을 클릭하면 명령어가 수행이 된다. Target마다 수행해야 할 스크립트 위치가 틀린 경우, Job설정시 Commands의 PATH항목에 절대경로가 아닌 상대경로를 입력하는 것도 해결 방법이 될 수 있다.

dir과 같은 명령어는 명령이 바로 종료가 되어 명령어 종료 시점에 결과를 보여준다. 하지만 어플리케이션을 구동하는 명령어 등과 같은 경우, 어플리케이션이 종료가 될 때까지 명령어가 종료되지 않기 때문에, ODEN에서는 15초간 진행된 결과만 화면에 보여주고 빠져나오고, 해당 프로세스는 시스템에서 백그라운드로 동작하게 된다. Unix의 ps 명령어나 Windows의 작업관리자 등을 통해 해당 프로세스를 확인할 수 있다. 대기시간 15초는 core/conf/oden.ini의 exec.timeout 속성에서 변경할 수 있다.

[[workingwithodenadmin_job_rollback]]


==== Job Rollback

:: 최근 배포한 파일을 원복 하는 명령이다. Admin 화면에서는 최신 배포만 기능을 제공 하며 이전의 배포 작업의 원복을 원할 경우는 Web Console에서 deploy undo txid를 직접 입력하여 수행한다.

[[workingwithodenadmin_history]]


=== History

:: 현재까지의 배포 목록과 함께 작업 결과를 확인할 수 있는 화면이다.

[[workingwithodenadmin_history_main]]


==== Searching Histories

:: 이제껏 배포한 이력들을 조회할 수 있다. 매 배포마다 고유의 ID가 부여되며, 첫번째 컬럼에서 확인할 수 있다. 컬럼 순으로 배포 ID와 배포성공 여부(그린이면 성공. 레드면 실패), 이 배포작업을 수행한 Job 이름, 배포 작업 일시, 배포한 파일 개수(성공한 파일 개수/전체 배포하기로 되어 있던 파일 개수), 해당 배포작업을 수행한 User의 Id순으로 보여진다.

배포 Id를 클릭하면 해당 배포의 상세 내역을 확인할 수 있다. 주로 어떤 파일이 배포되었고, 어떤 파일이 배포되지 않았는지 확인할 수 있다.

검색란을 통해 특정 조건에 맞는 배포작업만 확인할 수 있다. File에 배포한 파일명을 입력을 하면 해당 파일을 배포한 모든 배포작업 목록만 보여진다. File뿐만이 아니라 User Id, Job으로도 검색 가능하다. Failed Only가 체크가 되어있으면 모든 배포 수행 작업 중 실패한 배포작업 목록만 출력되게 된다. 디폴트로 실패한 배포 목록만 출력되므로 전체 배포 작업 목록을 보고 싶을 경우 Failed Only항목의 체크를 해제하고 검색하여야 한다.


[NOTE]
====
배포 이력은 디폴트로 365일 동안 보관된다. core/conf/oden.ini의 log.duration 속성을 통해 변경할 수 있다. 단위는 day이다.


====


[[workingwithodenadmin_history_detail]]


==== Searching Deploy File List

:: 특정 배포 작업의 상세 정보를 확인할 수 있다. 왼쪽 컬럼부터 순서대로 인덱스, 해당 파일 배포 성공여부(그린이면 성공. 레드면 실패), Target Server명, 배포 파일명, 배포 모드(기존에 없는 파일을 새로 배포하게 되면 Add, 기존에 존재하던 파일을 새로운 파일로 덮어쓸 경우 Update, Target Server의 파일을 삭제할 경우 Delete), 그리고 배포 실패시 보여지는 Error Message가 있다.

배포파일 명으로 검색이 가능하며, 배포 모드별로 필터링도 가능하다. Failed Only에 체크가 되어 있으면, 배포에 실패한 아이템만 검색할 수 있다.

[[workingwithodenadmin_status]]


=== Status

:: 진행중인 배포 작업과, 대기중인 작업 리스트를 모니터링할 수 있는 화면이다.

[[workingwithodenadmin_status_jobstatus]]


==== Job Status

:: 현재 진행중이거나 대기중인 배포 작업들을 확인할 수 있다. 배포는 한번에 한 작업씩만 진행되므로 나머지 작업들은 대기중인 상태를 확인할 수 있다. 진행중인 작업을 중단하거나 대기중인 작업을 취소할 수 있다.

현재 진행중인 배포 작업에 대해서는 작업 진행률과 배포중인 파일에 대한 정보가 나타난다.

[[workingwithodenadmin_log]]


=== Log

:: ODEN Server에 발생한 System Log를 확인할 수 있는 화면이다.

[[workingwithodenadmin_log_searchlog]]


==== ODEN System Log

:: 배포 시 문제가 발생했을 경우, 그 원인을 찾는데 메시지만으로 찾기 힘들때 도움이 되거나, 개발자의 디버깅 용도로 사용하기위한 화면이다. Log는 각 날짜별로 확인할 수 있으며, 이를 통해 ODEN Admin과 ODEN Server 사이에서 어떤 문제가 발생했는지 확인할 수 있다.


[NOTE]
====
Admin role의 계정만 본 기능을 사용할 수 있다.


====


[[workingwithodenadmin_user]]


=== User

:: 배포 작업을 수행할 수 있는 사용자를 등록하여 권한을 부여하고, 주어진 권한을 제어하며, 등록된 사용자를 삭제할 수 있는 기능을 가진 화면이다. 사용자에 관한 내용을 제어하므로 권한을 가진 일부 사용자만 접근할 수 있다.


[NOTE]
====
Admin role의 계정만 본 기능을 사용할 수 있다.


====


[[workingwithodenadmin_user_main]]


==== User List

:: User 목록화면은 현재 등록된 사용자들의 목록을 보여준다. Role이 Deployer인 사용자에게 주어지는 권한은 Job별로 주어지며, 권한이 있는 Job에 대해서만 상세정보, 배포이력(History) 정보를 확인할 수 있다. Role이 Admin인 사용자는 모든 Job에 대한 권한이 주어지므로 모든 Job 정보를 확인할 수 있다.

만약 Role이 Admin인 사용자라면, 모든 Job에 대해 권한이 있으므로 Assigned Job List에는

**All Jobs**라고만 나타난다. 하지만 모든 Job에 대해 권한이 있는 사용자라고 해도 Role이 Deployer일 경우에는 Assigned Job List에는 모든 Job List가 나타난다.



[[workingwithodenadmin_user_add]]


==== Add User

:: 사용자는 페이지 상단의 Add 버튼을 통해 추가할 수 있다. 표 하단에 사용자 정보를 입력할 수 있는 부분이 나타나며, 이미 등록된 사용자를 클릭하면 사용자의 정보를 확인할 수 있다. 사용자 정보를 확인하는 도중에 새로운 사용자를 추가하려면 Add 버튼을 눌러 보여지는 사용자 상세정보를 초기화 한 후에 입력하면 된다.

* **User ID**: 사용자가 사용할 ID



* **Role Name**: 등록할 사용자의 권한(Admin / Deployer)


** Admin : 모든 Job에 접근이 가능하며, User 메뉴 접근이 가능

** Deployer : assign된 Job에 대해서만 접근이 가능하며, User 메뉴에는 접근 불가

* **Password / Confirm Password**: 사용자가 사용할 비밀번호



* **Assign Job**: 사용자에게 접근 권한이 주어진 Job List(Job이 둘 이상일 경우 컴마(,)를 통해 구분한다.)





[[workingwithodenadmin_user_remove]]


==== Remove User

:: User 목록에서 삭제하고 싶은 사용자 계정을 User의 휴지통 아이콘을 클릭하여 해당 사용자를 삭제할 수 있다.


[NOTE]
====
계정 관리를 위해 기본 제공된 사용자 계정(oden)을 제외한 모든 계정은 삭제가 가능하다.


====


