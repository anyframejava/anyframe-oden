<section id="gettingstarted">
	<title>Getting Started</title>

	<section id="gettingstarted_100">
		<title>설치 및 실행</title>
		<para>파일이 있는 시스템에는 ODEN을 Server모드로, 파일이 배포될 시스템에는 ODEN을 Agent모드로 구동해야 한다.
		여기서는 편의상 동일 시스템에 Server와 Agent를 모두 설치하고 진행한다. ODEN이 설치될 디렉토리 및 상위 디렉토리에 공백이 있어서는 안된다. 
			Windows의 바탕화면의 경우 상위 폴더에 공백이 있기 때문에, ODEN이 제대로 실행되지 않을 수도 있다.
		</para>

		<section id="gettingstarted_110">
			<title>server 실행</title>
			<itemizedlist>
			<listitem><para>Anyframe-Oden-x.x.x-bin.zip의 압축 해제 </para></listitem>
			<listitem><para>bin폴더로 이동하여 startup.cmd 실행 </para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_120">
			<title>agent 실행</title>
			<itemizedlist>
			<listitem><para>bin폴더로 이동하여 startup-agent.cmd 실행(startup.cmd는 server모드, startup-agent.cmd는 agent모드로 ODEN을 구동시킨다.)</para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_130">
			<title>server에 agent등록 확인</title>
			<para>서버가 설치된 경로로 가서 conf/config.xml에 아래의 내용이 있는지 확인한다. 
			agent의 위치나 port등이 수정되었을 경우 혹은 새 agent를 추가할 경우 이 내용을 수정해 주어야 한다. </para>
			<programlisting><![CDATA[
<agent name="sampleapp">
  <address host="localhost" port="9872"/>
  <default-location value="target"/>
  <backup-location value="snapshot"/>
</agent>
			]]></programlisting>
			<itemizedlist>
			<listitem><para>sampleapp는 배포위치를 지칭하는 별칭 </para></listitem>
			<listitem><para>localhost는 배포될 url(agent가 설치된 서버의 url) </para></listitem>
			<listitem><para>port는 agent의 포트(디폴트 9872. agent.ini에서 수정 가능) </para></listitem>
			<listitem><para>default-location은 파일이 배포될 경로 (상대 path일 경우 oden이 설치된 path를 기준으로 최종경로를 찾는다.)</para></listitem>
			<listitem><para>backup-location은 배포 시 생성되는 임시파일이 저장될 경로 (상대 path일 경우 oden이 설치된 path를 기준으로 최종경로를 찾는다.)</para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_140">
			<title>연결 확인  </title>
			<para>ODEN이 설치된 경로의 bin폴더로 가서 아래와 같이 입력</para>
			<programlisting><![CDATA[
runc.cmd agent info sampleapp
			]]></programlisting>
			<para>... status = true ... 가 나오면 sampleapp과의 연결 성공</para>
		</section>
	</section>

	<section id="gettingstarted_200">
		<title>배포</title>
		
		<section id="gettingstarted_210">
			<title>웹콘솔 실행 </title>
			<para>커맨드라인이 아닌 웹브라우저로도 명령 실행 가능. 웹브라우저에서 아래의 url 입력</para>
			<programlisting><![CDATA[
http://localhost:9860/wconsole.html
			]]></programlisting>
			<itemizedlist>
			<listitem><para>localhost는 server가 설치된 서버의 url </para></listitem>
			<listitem><para>9860은 server의 포트(oden.ini에서 수정 가능) </para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_220">
			<title>배포정책 추가</title>
			<para>policy info명령어를 입력하여 아래와 같은 배포 정책이 추가되어 있는지 확인한다.</para>
			<programlisting><![CDATA[
sampleapp = -r "file://doc" -i "**" -d "sampleapp:~"
			]]></programlisting>
			<itemizedlist>
			<listitem><para>sampleapp는 이 배포정책의 이름 </para></listitem>
			<listitem><para>-r file://doc는 배포될 파일이 존재하는 경로(oden설치폴더 이하의 doc 폴더) </para></listitem>
			<listitem><para>-i "**" 배포될 파일 지정(**는 하위 디렉터리 포함함을 의미. 일부 쉘에서는 *를 디렉터리내의 모든 파일목록으로 변경해 버리므로 ""로 묶어주는 것이 좋다.)</para></listitem>
			<listitem><para>-d sampleapp:~ (config.xml에 지정한 sampleapp의 default-location으로 배포하겠음을 의미)</para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_230">
			<title>배포</title>
			<para>위에서 확인한 sampleapp 배포정책을 수행한다. doc이하의 파일들이 sampleapp의 default-location인 target폴더로 배포될 것이다.</para>
			<programlisting><![CDATA[
task run sampleapp -sync
			]]></programlisting>
			<itemizedlist>
			<listitem><para>-sync는 배포가 끝날때까지 기다리라는 옵션. 배포량이 많을 경우 -sync옵션을 사용하면 대기 시간이 길어지므로, -sync를 사용하지 않고 배포 한 뒤, status info 명령어를 통해 진행사항을 확인하길 권장한다.</para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_240">
			<title>결과 확인</title>
			최근에 배포한 날짜의 목록을 조회하려면 아래와 같이 입력한다. 
			<programlisting><![CDATA[
history info
			]]></programlisting>
			<para>가장 최근에 배포에 대한 상세 내역을 보려면 아래와 같이 입력한다. </para>
			<programlisting><![CDATA[
history show
			]]></programlisting>
			<para>ODEN이 설치된 폴더 이하에 target 폴더가 새로 생성되었고, doc이하의 파일들이 배포되었음을 확인한다.</para>
		</section>
	</section>

	<section id="gettingstarted_300">
		<title>인증</title>
		
		<section id="gettingstarted_320">
			<title>계정 추가</title>
			<itemizedlist>
			<listitem><para>서버가 설치된 경로의 bin폴더로 이동 </para></listitem>
			<listitem><para>acc.cmd &lt;id> &lt;pwd> 입력 (유저를 삭제하려면 conf/account.txt에서 해당 라인 삭제. 디폴트 계정: oden/oden0 )</para></listitem>
			</itemizedlist>
			<para>기 등록된 계정의 password를 변경하고 싶다면, acc.cmd &lt;기존계정> &lt;새 password>를 입력하면 된다. </para>
		</section>
		
		<section id="gettingstarted_330">
			<title>웹으로 실행</title>
			<itemizedlist>
			<listitem><para>웹콘솔(http://localhost:9860/wconsole.html) 실행하여 help입력 </para></listitem>
			<listitem><para>id와 pwd묻는 창이 뜨면 위에서 추가한 계정이나 디폴트 계정(oden/oden0)를 입력한다. </para></listitem>
			<listitem><para>정상적으로 결과가 나오는지 확인한다. </para></listitem>
			</itemizedlist>
		</section>
		
		<section id="gettingstarted_340">
			<title>커맨드라인으로 실행</title>
			<para>커맨드라인으로 ODEN에 명령을 내릴 경우, 별도로 id와 pwd를 입력받지 않기 때문에,
			어느 계정으로 수행할 것인지 미리 설정해 주어야 한다. 
			</para>
			<itemizedlist>
			<listitem><para>커맨드라인으로 실행 시 사용할 유저를 설정하기 위해 conf/oden.ini 오픈 </para></listitem>
			<listitem><para>console.user 에 추가된 유저id중 하나 입력(default로 oden계정이 설정되어 있다.)</para></listitem>
			<listitem><para>bin폴더로 이동한 뒤, runc.cmd help를 입력하여 결과가 제대로 나온다면 성공</para></listitem>
			</itemizedlist>
		</section>
	</section>
	
	<section id="gettingstarted_400">
		<title>변경파일만 배포</title>
		<para>ODEN은 원본파일과 배포된 파일의 시간과 size등을 비교하여 변경된 파일만 배포할 수 있다. 
		실제 CI환경을 통해 작업시, 빌드 단계에서 부터 수정된코드만 빌드(Incremental Build)를 해주어야 하나, 
		여기서는 빌드작업없이 배포될 파일을 직접 수정한 뒤, 변경된 파일만 배포가 되었음을 확인할 것이다.  
		</para>
		
		<section id="gettingstarted_410">
			<title>배포될 파일 수정</title>
			<para>doc/html폴더로 이동하여 ch02.html을 오픈한다.</para>
			<para>적당한 위치의 글자를 수정하거나 스페이스등을 입력하여, 파일을 수정한다.</para>
		</section>
		
		<section id="gettingstarted_420">
			<title>파일 배포</title>
			<para>WebConsole이나 커맨드라인을 통해 아래의 명령을 입력한다. </para>
			<programlisting><![CDATA[
task run sampleapp-update -sync
			]]></programlisting>
			<para>1개의 파일만 배포가 되었음을 확인한다. 상세 배포내역은 history show명령어를 통해 확인할 수 있다. </para>
		</section>
		
		<note>
			<title>Incremental build란? </title>
			<para>변경파일만 배포하기 위해서는 ant에서 제공하는 Incremental build로 빌드하여야 함. ant의 javac는 소스에 해당하는 .class파일이 존재하지 않을 때만 빌드를 수행하므로 변경된 소스의 .class만 삭제해 주는 것이 원리. 
			</para>
			<programlisting><![CDATA[
<target name="init">
  <depend srcdir="${src}" destdir="${dest}" closure="yes"/>
  <delete dir="${dist}"/>
  <mkdir dir="${dist}"/>
</target>
			]]></programlisting>
			<para>ant의 depend 태그를 이용하여 변경이 일어난 소스와 해당 소스와 의존성이 있는 .class파일만 삭제(기존에 빌드된 파일을 전부 삭제하면 안됨. depend로 변경된 파일만 삭제하여야 함)
			</para>
			<programlisting><![CDATA[
<target name="build">
  <javac srcdir="${src}" destdir="${dest}">
    <classpath>
      <fileset dir="${lib}"/>
    </classpath>
  </javac>
</target>
			]]></programlisting>
			<para>컴파일은 기존 방식과 동일</para>
			<para>ODEN에 배포작업 추가시(task add 혹은 policy add 명령어 이용) -u 옵션을 붙여, 변경된 파일만 배포하도록 해야 한다. </para>
			<para>유의사항</para>
			<itemizedlist>
			<listitem><para>CTIP을 통해 형상관리에서 빌드할 파일들을 내려 받을 시 update된 파일만 받도록 설정하여야 함(일반적으로 디폴트 설정임).</para></listitem>
			<listitem><para>ant스크립트에서 copy명령어 사용 시 아래처럼 preservelastmodified="true"로 주어야 함.</para></listitem>
			</itemizedlist>
			<programlisting><![CDATA[
<copy todir="${dist}" preservelastmodified="true">...</copy>
			]]></programlisting>
		</note>
	</section>
	
	<section id="gettingstarted_500">
		<title>ant 연계</title>
		
		<section id="gettingstarted_510">
			<title>oden ant태그를 통한 배포</title>
			<para>lib-ant폴더로 이동한 뒤, sample.xml을 오픈하여 아래의 내용을 확인한다. </para>
			<programlisting><![CDATA[
<taskdef resource="oden-task.properties" classpath="anyframe.oden.ant.jar"/>
<target name="deploy">
  <oden-task server="localhost" port="9860" 
  	id="oden" pw="oden0">
    <deploy repository="file://doc" includes="**">
      <agent name="sampleapp"/>
    </deploy>
  </oden-task>
</target>
			]]></programlisting>
			<para>위 스크립트를 실행하면 localhost:9860에 설치되어 있는 ODEN에 oden/oden0로 접속하여, file://doc이하의 모든 파일을 sampleapp의 default-location이하에 배포할 것이다.</para>
			<programlisting><![CDATA[ant -f sample.xml]]></programlisting>
			<para> 
			수행 후 doc이하의 파일들이 target폴더로 배포될 것이며, 결과는 history info나 history show로 확인 가능하다. ant로 배포하였을 경우 
			배포정책명이 자동으로 oden_ant_task로 설정되서 수행된다.   
			</para>
		</section>
	</section>
	
	<section id="gettingstarted_600">
		<title>외부 app과 연계</title>
		
		<section id="gettingstarted_610">
			<title>jquery를 통한 oden연계 </title>
			<programlisting><![CDATA[
$.ajaxSetup({
  url: 'http://localhost:9860/shell',
  type: 'post',
  success: function(result){
    result = eval(result);
    var history = result[0];
    alert('id: ' + history.id);
  }
});
$.ajax({data: 'history info' + ' -json'});
// json형태로 결과를 받기 위해서는 명령어에 -json옵션을 붙여줘야 함.
// json의 결과 형태는 명령어 창에 -json옵션을 붙여 명령어를 실행하면 알 수 있음.
			]]></programlisting>
		</section>
		
		<section id="gettingstarted_620">
			<title>java를 통한 oden연계</title>
			<programlisting><![CDATA[
URLConnection con = new URL("http://localhost:9860/shell").openConnection();
con.setDoOutput(true);

PrintWriter pw = new PrintWriter(con.getOutputStream());
pw.print("history info - json");
pw.flush();

BufferedReader br = new BufferedReader(new InputStreamReader(
  con.getInputStream()));
StringBuffer buf = new StringBuffer();
String line = null;
while((line=br.readLine()) != null) {
  buf.append(line + "\n");
}
System.out.println(buf.toString());
br.close();
pw.close();
			]]></programlisting>
		</section>
	</section>
	
	<section id="gettingstarted_700">
		<title>기타</title>
		
		<section id="gettingstarted_710">
			<title>현재 작업중인 상황 확인 및 중지 </title>
			<programlisting><![CDATA[
status info
]]></programlisting>
			<para>현재 진행중이거나 대기중인 작업들 목록 보여줌.</para>
			<programlisting><![CDATA[
status stop <id>
			]]></programlisting>
			<para>정지할 작업의 id를 입력하여 작업 정지</para>
		</section>
		
		<section id="gettingstarted_720">
			<title>서버에 배포된 파일 정합성 체크</title>
			<para>서버들간에 배포된 파일이 동일한지 체크</para>
			<programlisting><![CDATA[
agent compare -t target0 target1 target2
			]]></programlisting>
			<itemizedlist>
			<listitem><para>target0, target1, target2는 conf/config.xml에 정의되어 있어야 함. </para></listitem>
			<listitem><para>해당 위치의 파일들을 비교하여 동일한 파일이 존재하는지 체크</para></listitem>
			</itemizedlist>
		</section>
	</section>
</section>
