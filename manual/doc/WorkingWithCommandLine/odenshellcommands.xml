<section id="workingwithcommandline_odenshellcommands">
	<title>Oden Commands</title>

	<para>
		Oden 명령어를 통해 Oden Server에 명령어를 전달할 수 있다. 인자에 스페이스가 들어가 있으면
		" "로 묶어줘야 한다. 옵션 뒤에 여러개의 인자를 넣길 원할 경우 스페이스로 구분하여 나열하면 된다.
		""로 묶인 부분은 스페이스가 있더라도 하나의 인자로 인식한다. 
	</para>

	<section id="workingwithcommandline_odenshellcommands_job">
		<title>Job Command</title>
		<para>
			Job은 어디에서 어디로 배포될 것인지가 기술된 배포 설정이다. 배포를 위해서는 Job이라는 배포설정을 미리 만들어 두고 
			Job을 실행시켜 배포를 하게 된다. Job은 하나의 Source와 여러개의 Target으로 구성되어 있다. 
			Source는 배포할 파일이 위치한 경로(빌드서버)를 지칭하며, Target은 파일이 배포될 경로(개발 혹은 운영서버)를 말한다. 
			Job을 설정하는 명령어는 별도로 제공하지 않으며 Oden Server의 jobs.xml을 직접 수정하거나 
			Oden Admin을 통해 설정해야 한다. jobs.xml을 수정하는 법은 아래 '참고'에 기술되어 있다.
		</para>
		
		<section id="workingwithcommandline_odenshellcommands_job_info">
			<title>job info</title>
			<para>
				등록되어 있는 job을 확인하기 위한 명령어.  
			</para>

			<programlisting><![CDATA[job info [ <job> ]]]></programlisting>

			<para>
				 job이름이 없을 경우 등록되어 있는 job 목록을 출력. job이름을 인자로 주었을 경우,
				 해당 job의 상세 내역을 출력. 
			</para>
		</section>

		<section id="workingwithcommandline_odenshellcommands_job_compare">
			<title>job compare</title>
			<para>
				job에는 여러개의 target들이 등록될 수 있다. 해당 target들에 배포된 파일들이 정확히 
				동일한 파일들인지 이 명령어를 통해 확인할 수 있다.  
			</para>
			<programlisting><![CDATA[job compare <job> [ -t <target> ... ] [ -failonly ]]]></programlisting>
			<para>
				해당 job에 속하는 target 중, 정합성 비교를 특정 target만 하고 싶다면 -t옵션 다음에 
				해당 target들의 이름을 스페이스로 구분지어 나열하면 된다. target에 배포된 파일이 많을 경우 
				-failonly 옵션을 붙이게 되면 동일하지 않은 파일들의 목록만 출력되기 때문에, 정합성 확인이 용이하다. 
			</para>
		</section>

		<section id="workingwithcommandline_odenshellcommands_job_mapping_scan">
			<title>job mapping-scan</title>
			<para>
				변경된 파일만 배포하려면 배포할 파일의 원본 파일이 필요하다. 다시말하면, 배포파일의 경우 일반적으로 빌드되어
				나온 결과이기 때문에, 빌드하기전의 .java파일들의 정보가 필요한데, 이 정보를 job의 SOURCE설정시
				Mapping에 추가해 주어야 한다. 이 명령어를 사용하면 현재 job에 알맞는 Mapping정보를 보여준다.
				이 정보를 바탕으로 실제 job에 Mapping정보를 추가해 주어야 한다.
			</para>
			<programlisting><![CDATA[job mapping-scan <job>]]></programlisting>
		</section>
	</section>

	<note>
		<para>
			명령어로 Oden을 사용할 경우, xml을 직접 편집하여 job을 추가해 주어야 한다. Oden Server의 conf폴더에
			jobs.xml을 생성하여 아래와 같이 job을 추가할 수 있다.
		</para>
		<programlisting><![CDATA[<oden> 
  <job name="batch"> 
    <source dir="/home/oden/workspace/src"/>
    <target address="localhost:9872" dir="/home/oden/app0" name="t0"/> 
    <target address="localhost:9873" dir="/home/oden/app1" name="t1"/>
  </job>
</oden>]]></programlisting>
		<para>
			가장 기본적인 형태는 위와 같다. oden태그로 시작하여 그 안에 여러개의 job을 설정할 수 있다. 
			하나의 job은 name이라는 attribute로 이름을 지정해 주어야 한다. job은 하나의  source를
			가져야만 한다. job은 하나 이상의 target을 가질 수 있다. 
			source는 Oden Server가 설치된 시스템이어야 하며 해당 경로에 배포할 파일이 존재하게 될 것이다.
			target은 파일이 배포될 원격의 경로이며, Oden Agent가 설치되어 있어야 한다. address에는 해당
			시스템의 ip와 port(Agent는 기본으로 9872포트를 사용한다)를 적어 주어야 한다. dir에는 source의
			파일이 배포될 경로를 지정해 주어야 한다. name은 이 target의 이름이며 필수 값이다. 같은 job안에서 
			target이름은 중복되어서는 안된다. 다른 job의 target이름과 중복되는 것은 허용된다.
		</para>
		
		<programlisting><![CDATA[<oden> 
  <job name="batch">
    <source dir="/home/oden/mypjt-1.0/dist" excludes="**/*.svn">
      <mapping checkout-dir="/home/oden/mypjt-1.0" dir="."/>
      <mapping checkout-dir="/home/oden/mypjt-1.0/src/main/java" dir="WEB-INF/classes"/>
      <mapping checkout-dir="/home/oden/mypjt-1.0/src/main/resources" dir="WEB-INF/classes"/>
    </source>
    <target address="localhost:9872" dir="/home/oden/dest1" name="t1"/>
    <target address="localhost:9873" dir="/home/oden/dest0" name="t0"/>
    <target address="localhost:9974" dir="/home/oden/dest2" name="t2"/>
    <command command="ls" dir="./" name="ls"/>
    <command command="./catalina.sh run" dir="/Applications/tomcat-6.0.2/bin" name="tomcat"/>
    <command command="ps -ef | grep tomcat" dir="./" name="ps"/>
  </job>
</oden>]]></programlisting>
		<para>
			위 예는 가장 복잡한 job설정의 예이다. 마찬가지로 job name이 존재하며, 하나의 source와 여러개의 target
			이 존재한다. 그리고 여러개의 command가 존재하는 데 이것은 job에 속한 target에 명령을 내리고 싶은 경우,
			쓰이게 된다. source에는 excludes라는 필드가 추가되었다. dir이하의 모든 파일 중 제외하고 싶은 목록을 스페이스로 구분하여 나열하면 된다.
			source하위에 mapping태그가 추가되었다. mapping은 변경된 파일만 배포하기 위해 추가적으로 지정해 주어야 하는
			정보이다. class 파일 배포 시 빌드 되기 전의 java파일의 정보를 이용하여 변경된 파일을 감지하게 된다. checkout-dir에는 java파일이 
			존재하는 경로, dir에는 class파일이 존재하는 경로를 적어주면 된다. Anyframe으로 프로젝트를 진행하는 경우,
			job mapping-scan 명령어를 이용하면 어떤 정보를 넣어야 되는지 자동으로 찾아준다.
			command는 target의 시스템에 특정 명령을 실행하고 싶은 경우 지정해 주면 된다. name에는 명령어를 지칭할 이름을 적어주면 되며,
			command attribute에는 실제로 실행할 명령어, dir에는 어느 경로에서 command를 실행할 것인지를 적어주면 된다. 이 command 태그는
			exec 명령어와 연관되어 사용된다. 
		</para>
	</note>


	<section id="workingwithcommandline_odenshellcommands_deploy">
		<title>Deploy Command</title>

		<section id="workingwithcommandline_odenshellcommands_deploy_test">
			<title>deploy test</title>
			<para>
				배포될 파일의 목록을 미리 조회하는 명령어 
			</para>
			<programlisting><![CDATA[deploy test <job> [ -t <target> ... ] 
	[-u | -i ] [ -del ]]]></programlisting>			
			<itemizedlist>
			<listitem><para>job의 target 중 특정 target에만 배포하고 싶다면, -t옵션 뒤에 target이름들을 스페이스로 구분하여 나열하면 된다. </para></listitem>
			<listitem><para>job의 SOURCE의 모든 파일을 배포하고 싶은 경우 -i 옵션을 지정하면 된다. </para></listitem>
			<listitem><para>job의 SOURCE의 파일 중 변경된 파일만 배포하고 싶다면 -u 옵션을 사용하면 된다. -i 옵션과 동시에 쓸 수 없다.</para></listitem>
			<listitem><para>target에 배포된 파일 중 job의 SOURCE에 존재하지 않는 파일을 삭제하고 싶을 경우 -del옵션을 사용하면 된다. </para></listitem>
			</itemizedlist>
		</section>

		<section id="workingwithcommandline_odenshellcommands_deploy_run">
			<title>deploy run</title>
			<para>
				SOURCE의 파일을 배포하는 명령어  
			</para>
			<programlisting><![CDATA[deploy run <job> [ -t <target> ... ] 
	[-u | -i ] [ -del ]]]></programlisting>
			<itemizedlist>
			<listitem><para>job의 target 중 특정 target에만 배포하고 싶다면, -t옵션 뒤에 target이름들을 스페이스로 구분하여 나열하면 된다. </para></listitem>
			<listitem><para>job의 SOURCE의 모든 파일을 배포하고 싶은 경우 -i 옵션을 지정하면 된다. </para></listitem>
			<listitem><para>job의 SOURCE의 파일 중 변경된 파일만 배포하고 싶다면 -u 옵션을 사용하면 된다. -i 옵션과 동시에 쓸 수 없다.</para></listitem>
			<listitem><para>target에 배포된 파일 중 job의 SOURCE에 존재하지 않는 파일을 삭제하고 싶을 경우 -del옵션을 사용하면 된다. </para></listitem>
			</itemizedlist>
		</section>
	
		<section id="workingwithcommandline_odenshellcommands_deploy_undo">
			<title>deploy undo</title>
			<para>
				배포를 원복하는 명령어  
			</para>
			<programlisting><![CDATA[deploy undo <txid>]]></programlisting>
			<itemizedlist>
			<listitem><para>txid를 통해 배포 작업을 원복한다. </para></listitem>
			</itemizedlist>
		</section>	
	</section>

	<section id="workingwithcommandline_odenshellcommands_log">
		<title>Log Command</title>

		<section id="workingwithcommandline_odenshellcommands_log_show">
			<title>log show</title>
			<para>
				배포한 상세 내역을 보여주는 명령어.  
			</para>
			<programlisting><![CDATA[log show <txId> [ -mode <A | U | D> ] [-path <path>] [-failonly] ]]></programlisting>
			<para>
				txId에 해당하는 배포 내역의 상세를 보여준다. 새로 추가 되거나(A), 변경되거나(U), 삭제된(D) 
				파일의 목록만 보고싶다면 -mode옵션을 사용하면 된다. 배포된 내역중 특정 파일의 내역을 찾고 싶다면 
				-path 이하에 파일명을 입력하면 된다. 실패한 파일 목록만 보고자 한다면 
				-failonly 옵션을 덧붙여 명령을 실행하면 된다. 
			</para>
		</section>
		
		<section id="workingwithcommandline_odenshellcommands_log_search">
			<title>log search</title>

			<para>
				배포된 목록을 간략히 보여준다.  
			</para>

			<programlisting><![CDATA[log search [-job <job>] [-user <user>] [-path <path>] [-failonly]]]></programlisting>

			<para>
				특정 job의 배포내역을 보고 싶다면 -job옵션을 사용하면 된다. 특정 user가 배포한 배포내역을 보고자 한다면 -user 옵션을 사용하면 된다. 특정파일이 배포된 내역을 보고자 한다면 -path 옵션을 사용하면 된다. 실패한 목록만 보고자 한다면 -failonly옵션을 추가하면 된다. 
			</para>
		</section>
		
		<section id="workingwithcommandline_odenshellcommands_log_error">
			<title>log error</title>

			<para>
				특정 날짜의 시스템 로그를 보여준다. 메시지만으로 배포가 왜 실패하였는지 알기 힘들 때, 혹은 개발자의 디버깅 용도로 사용된다.
			</para>

			<programlisting><![CDATA[log error [-date <date>]]]></programlisting>
			
			<para>
				-date옵션을 지정하지 않았을 경우 최신 시스템 로그를 출력한다. 시스템 로그는 날짜별로 oden 서버의 meta 폴더에 저장된다. 로그 파일의 크기가 10메가가 넘을 경우 기존 로그는 백업하고 새 로그파일에 로그를 기록한다.
			</para>
		</section>
		
		<note>
			<para>
				배포 이력은 디폴트로 365일 동안 보관된다. oden.ini의 log.duration 속성을 통해 변경할 수 있다.
				단위는 day이다. 
			</para>
		</note>
	</section>


	<section id="workingwithcommandline_odenshellcommands_exec">
		<title>Exec Command</title>

		<section id="workingwithcommandline_odenshellcommands_exec_run">
			<title>exec run</title>
			<para>
				exec명령어를 통해 job에 등록된 command를 실행시킬 수 있다. 해당 command 는 특별히 target을
				지칭하지 않는 이상 job에 등록된 모든 Target을 대상으로 수행 된다.   
			</para>
			<programlisting><![CDATA[exec run <job> [ -t <target> ... ] -c <command-name>...]]></programlisting>
			<para>
				job에 등록된 모든 target이 아닌 특정 target으로 한정짓고 싶다면 -t옵션을 사용하면 된다. job에 등록된 명령어 중 수행할 명령어의 이름을 -c옵션 이하에 나열한다.
			</para>
		</section>
	</section>
	
	<section id="workingwithcommandline_odenshellcommands_status">
		<title>Status Command</title>

		<para>
			진행중인 배포내역을 확인하는 명령어이다. (Log 명령어는 기 배포된 내역과 관련된 명령어 이며,
			Status 명령어는 현재 진행중인 배포 내역과 관련된 명령어이다.) 
		</para>

		<section id="workingwithcommandline_odenshellcommands_status_info">
			<title>status info</title>
			<para>
				현재 진행중인 작업의 진행현황 혹은 대기 중인 작업 리스트를 출력한다. 
			</para>
			<programlisting><![CDATA[status info]]></programlisting>
		</section>

		<section id="workingwithcommandline_odenshellcommands_status_stop">
			<title>status stop</title>
			<para>
				현재 진행중이거나 대기중인 배포 작업을 취소한다. 
			</para>
			<programlisting><![CDATA[status stop <txid>]]></programlisting>
		</section>
	</section>
</section>